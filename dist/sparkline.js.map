{"version":3,"sources":["webpack://sparkline/webpack/bootstrap","webpack://sparkline/./src/sparkline.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getY","max","height","diff","Math","round","defaultFetch","entry","buildElement","tag","attrs","element","document","createElementNS","setAttribute","sparkline","svg","entries","options","Array","from","childNodes","forEach","removeChild","removeChildren","length","map","isNaN","onmousemove","onmouseout","interactive","spotRadius","spotDiameter","cursorWidth","strokeWidth","parseFloat","attributes","fetch","values","width","fullHeight","minScale","lastItemIndex","offset","datapoints","pathY","pathCoords","index","x","y","push","assign","path","class","fill","stroke","appendChild","cursor","x1","x2","y1","y2","stroke-width","spot","cx","cy","interactionLayer","style","addEventListener","event","mouseX","offsetX","nextDataPoint","find","currentDataPoint","halfway","previousDataPoint","indexOf","__webpack_exports__"],"mappings":"0BACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,kCClFA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAlB,GACA,OAAAmB,KAAAC,MAAA,KAAAH,EAAAjB,EAAAiB,EAAAD,EAAAE,IAAA,IAOA,SAAAG,EAAAC,GACA,OAAAA,EAAAtB,MAGA,SAAAuB,EAAAC,EAAAC,GACA,MAAAC,EAAAC,SAAAC,gBAAA,6BAAAJ,GAEA,QAAAlC,KAAAmC,EACAC,EAAAG,aAAAvC,EAAAmC,EAAAnC,IAGA,OAAAoC,EAGO,SAAAI,EAAAC,EAAAC,EAAAC,GAGP,GArBA,SAAAF,GACAG,MAAAC,KAAAJ,EAAAK,YAAAC,QAAAX,GAAAK,EAAAO,YAAAZ,IAkBAa,CAAAR,GAEAC,EAAAQ,QAAA,EACA,OAGAP,QAEA,iBAAAD,EAAA,KACAA,IAAAS,IAAAnB,KACctB,MAAA0C,MAAApB,GAAA,EAAAA,MAOd,MAAAqB,EAAAV,EAAAU,YAIAC,EAAAX,EAAAW,WAIAC,EAAA,MAAAZ,EAAAY,YAAAZ,EAAAY,cAAAF,EAGAG,EAAAb,EAAAa,YAAA,EACAC,EAAA,EAAAD,EAGAE,EAAAf,EAAAe,aAAA,EAIAC,EAAAC,WAAAnB,EAAAoB,WAAA,gBAAAnD,OAMAoD,EAAAnB,EAAAmB,OAAA/B,EAGAgC,EAAArB,EAAAS,IAAAnB,GAAA8B,EAAA9B,IAGAgC,EAAAJ,WAAAnB,EAAAoB,WAAAG,MAAAtD,OAAA,EAAA+C,EAIAQ,EAAAL,WAAAnB,EAAAoB,WAAAlC,OAAAjB,OAGAiB,EAAAsC,EAAA,EAAAN,EAAAF,EAIA/B,EAAAG,KAAAH,IAAAiB,EAAAuB,UAAA,KAAAH,IAAA,EAOAI,EAAAJ,EAAAb,OAAA,EAGAkB,EAAAJ,EAAAG,EAIAE,KAGAC,EAAA7C,EAAAC,EAAAC,EAAAgC,EAAAH,EAAAO,EAAA,KAAApC,EACA,IAAA4C,MAAuBd,KAAgBa,IAEvCP,EAAAhB,QAAA,CAAArC,EAAA8D,KACA,MAAAC,EAAAD,EAAAJ,EAAAX,EACAiB,EAAAjD,EAAAC,EAAAC,EAAAgC,EAAAH,EAAA9C,IAAAiB,EAEA0C,EAAAM,KAAAxE,OAAAyE,UAAoClC,EAAA8B,IACpCA,QACAC,IACAC,OAGAH,SAAwBE,KAAKC,MAG7B,MAAAG,EAAA5C,EAAA,QACA6C,MAAA,kBACA/E,EAAAwE,EACAQ,KAAA,SAKA,MAAAA,EAAA9C,EAAA,QACA6C,MAAA,kBACA/E,KAJsBwE,OAAgBN,OAAgBR,KAAgBQ,MAKtEe,OAAA,SAMA,GAHAvC,EAAAwC,YAAAF,GACAtC,EAAAwC,YAAAJ,IAEAtB,EACA,OAGA,MAAA2B,EAAAjD,EAAA,QACA6C,MAAA,oBACAK,IApDA,IAqDAC,IArDA,IAsDAC,GAAA,EACAC,GAAArB,EACAsB,eAAA7B,IAGA8B,EAAAvD,EAAA,UACA6C,MAAA,kBACAW,IA7DA,IA8DAC,IA9DA,IA+DAnF,EAAAiD,IAGAf,EAAAwC,YAAAC,GACAzC,EAAAwC,YAAAO,GAEA,MAAAG,EAAA1D,EAAA,QACA+B,MAAAvB,EAAAoB,WAAAG,MAAAtD,MACAiB,OAAAc,EAAAoB,WAAAlC,OAAAjB,MACAkF,MAAA,yCACAd,MAAA,iCAEArC,EAAAwC,YAAAU,GAEAA,EAAAE,iBAAA,WAAAC,IACAZ,EAAA3C,aAAA,MA9EA,KA+EA2C,EAAA3C,aAAA,MA/EA,KAiFAiD,EAAAjD,aAAA,MAjFA,KAmFAe,GACAA,EAAAwC,KAIAH,EAAAE,iBAAA,YAAAC,IACA,MAAAC,EAAAD,EAAAE,QAEA,IAAAC,EAAA5B,EAAA6B,KAAAlE,GACAA,EAAAyC,GAAAsB,GAGAE,IACAA,EAAA5B,EAAAF,IAGA,IACAgC,EACAC,EAFAC,EAAAhC,IAAAiC,QAAAL,GAAA,GAIAI,GACAD,EAAAC,EAAA5B,GAAAwB,EAAAxB,EAAA4B,EAAA5B,GAAA,EACA0B,EAAAJ,GAAAK,EAAAH,EAAAI,GAEAF,EAAAF,EAGA,MAAAxB,EAAA0B,EAAA1B,EACAC,EAAAyB,EAAAzB,EAEAc,EAAAjD,aAAA,KAAAkC,GACAe,EAAAjD,aAAA,KAAAmC,GAEAQ,EAAA3C,aAAA,KAAAkC,GACAS,EAAA3C,aAAA,KAAAkC,GAEApB,GACAA,EAAAyC,EAAAK,KA9MA9G,EAAAkB,EAAAgG,GAAAlH,EAAAU,EAAAwG,EAAA,8BAAA/D,IAmNe+D,EAAA","file":"sparkline.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","function getY(max, height, diff, value) {\r\n  return (Math.round((height - (value * height / max) + diff) * 100)) / 100;\r\n}\r\n\r\nfunction removeChildren(svg) {\r\n  Array.from(svg.childNodes).forEach(element => svg.removeChild(element));\r\n}\r\n\r\nfunction defaultFetch(entry) {\r\n  return entry.value;\r\n}\r\n\r\nfunction buildElement(tag, attrs) {\r\n  const element = document.createElementNS(\"http://www.w3.org/2000/svg\", tag);\r\n\r\n  for (let name in attrs) {\r\n    element.setAttribute(name, attrs[name]);\r\n  }\r\n\r\n  return element;\r\n}\r\n\r\nexport function sparkline(svg, entries, options) {\r\n  removeChildren(svg);\r\n\r\n  if (entries.length <= 1) {\r\n    return;\r\n  }\r\n\r\n  options = options || {};\r\n\r\n  if (typeof(entries[0]) === \"number\") {\r\n    entries = entries.map(entry => {\r\n      return {value: (isNaN(entry) ? 0 : entry)};\r\n    });\r\n  }\r\n\r\n  // This function will be called whenever the mouse moves\r\n  // over the SVG. You can use it to render something like a\r\n  // tooltip.\r\n  const onmousemove = options.onmousemove;\r\n\r\n  // This function will be called whenever the mouse leaves\r\n  // the SVG area. You can use it to hide the tooltip.\r\n  const onmouseout = options.onmouseout;\r\n\r\n  // Should we run in interactive mode? If yes, this will handle the\r\n  // cursor and spot position when moving the mouse.\r\n  const interactive = options.interactive != null ? options.interactive : !!onmousemove;\r\n\r\n  // Define how big should be the spot area.\r\n  const spotRadius = options.spotRadius || 2;\r\n  const spotDiameter = spotRadius * 2;\r\n\r\n  // Define how wide should be the cursor area.\r\n  const cursorWidth = options.cursorWidth || 2;\r\n\r\n  // Get the stroke width; this is used to compute the\r\n  // rendering offset.\r\n  const strokeWidth = parseFloat(svg.attributes[\"stroke-width\"].value);\r\n\r\n  // By default, data must be formatted as an array of numbers or\r\n  // an array of objects with the value key (like `[{value: 1}]`).\r\n  // You can set a custom function to return data for a different\r\n  // data structure.\r\n  const fetch = options.fetch || defaultFetch;\r\n\r\n  // Retrieve only values, easing the find for the maximum value.\r\n  const values = entries.map(entry => fetch(entry));\r\n\r\n  // The rendering width will account for the spot size.\r\n  const width = parseFloat(svg.attributes.width.value) - spotDiameter * 2;\r\n\r\n  // Get the SVG element's full height.\r\n  // This is used\r\n  const fullHeight = parseFloat(svg.attributes.height.value);\r\n\r\n  // The rendering height accounts for stroke width and spot size.\r\n  const height = fullHeight - (strokeWidth * 2) - spotDiameter;\r\n\r\n  // The maximum value. This is used to calculate the Y coord of\r\n  // each sparkline datapoint.\r\n  const max = Math.max(options.minScale || 0,...values) || 0;\r\n\r\n  // Some arbitrary value to remove the cursor and spot out of\r\n  // the viewing canvas.\r\n  const offscreen = -1000;\r\n\r\n  // Cache the last item index.\r\n  const lastItemIndex = values.length - 1;\r\n\r\n  // Calculate the X coord base step.\r\n  const offset = width / lastItemIndex;\r\n\r\n  // Hold all datapoints, which is whatever we got as the entry plus\r\n  // x/y coords and the index.\r\n  const datapoints = [];\r\n\r\n  // Hold the line coordinates.\r\n  const pathY = getY(max, height, strokeWidth + spotRadius, values[0]) || height;\r\n  let pathCoords = `M${spotDiameter} ${pathY}`;\r\n\r\n  values.forEach((value, index) => {\r\n    const x = index * offset + spotDiameter;\r\n    const y = getY(max, height, strokeWidth + spotRadius, value) || height;\r\n\r\n    datapoints.push(Object.assign({}, entries[index], {\r\n      index: index,\r\n      x: x,\r\n      y: y\r\n    }));\r\n\r\n    pathCoords += ` L ${x} ${y}`;\r\n  });\r\n\r\n  const path = buildElement(\"path\", {\r\n    class: \"sparkline--line\",\r\n    d: pathCoords,\r\n    fill: \"none\"\r\n  });\r\n\r\n  let fillCoords = `${pathCoords} V ${fullHeight} L ${spotDiameter} ${fullHeight} Z`;\r\n\r\n  const fill = buildElement(\"path\", {\r\n    class: \"sparkline--fill\",\r\n    d: fillCoords,\r\n    stroke: \"none\"\r\n  });\r\n\r\n  svg.appendChild(fill);\r\n  svg.appendChild(path);\r\n\r\n  if (!interactive) {\r\n    return;\r\n  }\r\n\r\n  const cursor = buildElement(\"line\", {\r\n    class: \"sparkline--cursor\",\r\n    x1: offscreen,\r\n    x2: offscreen,\r\n    y1: 0,\r\n    y2: fullHeight,\r\n    \"stroke-width\": cursorWidth\r\n  });\r\n\r\n  const spot = buildElement(\"circle\", {\r\n    class: \"sparkline--spot\",\r\n    cx: offscreen,\r\n    cy: offscreen,\r\n    r: spotRadius\r\n  });\r\n\r\n  svg.appendChild(cursor);\r\n  svg.appendChild(spot);\r\n\r\n  const interactionLayer = buildElement(\"rect\", {\r\n    width: svg.attributes.width.value,\r\n    height: svg.attributes.height.value,\r\n    style: \"fill: transparent; stroke: transparent\",\r\n    class: \"sparkline--interaction-layer\",\r\n  });\r\n  svg.appendChild(interactionLayer);\r\n\r\n  interactionLayer.addEventListener(\"mouseout\", event => {\r\n    cursor.setAttribute(\"x1\", offscreen);\r\n    cursor.setAttribute(\"x2\", offscreen);\r\n\r\n    spot.setAttribute(\"cx\", offscreen);\r\n\r\n    if (onmouseout) {\r\n      onmouseout(event);\r\n    }\r\n  });\r\n\r\n  interactionLayer.addEventListener(\"mousemove\", event => {\r\n    const mouseX = event.offsetX;\r\n\r\n    let nextDataPoint = datapoints.find(entry => {\r\n      return entry.x >= mouseX;\r\n    });\r\n\r\n    if (!nextDataPoint) {\r\n      nextDataPoint = datapoints[lastItemIndex];\r\n    }\r\n\r\n    let previousDataPoint = datapoints[datapoints.indexOf(nextDataPoint) - 1];\r\n    let currentDataPoint;\r\n    let halfway;\r\n\r\n    if (previousDataPoint) {\r\n      halfway = previousDataPoint.x + ((nextDataPoint.x - previousDataPoint.x) / 2);\r\n      currentDataPoint = mouseX >= halfway ? nextDataPoint : previousDataPoint;\r\n    } else {\r\n      currentDataPoint = nextDataPoint;\r\n    }\r\n\r\n    const x = currentDataPoint.x;\r\n    const y = currentDataPoint.y;\r\n\r\n    spot.setAttribute(\"cx\", x);\r\n    spot.setAttribute(\"cy\", y);\r\n\r\n    cursor.setAttribute(\"x1\", x);\r\n    cursor.setAttribute(\"x2\", x);\r\n\r\n    if (onmousemove) {\r\n      onmousemove(event, currentDataPoint);\r\n    }\r\n  });\r\n}\r\n\r\nexport default sparkline;\r\n"],"sourceRoot":""}